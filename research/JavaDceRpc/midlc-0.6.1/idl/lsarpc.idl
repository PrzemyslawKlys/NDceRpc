[
	uuid(12345778-1234-abcd-ef00-0123456789ab),
	version(0.0)
]
interface lsarpc
{
	import "rpc.idl";

	typedef struct {
		uint32_t length;
		uint16_t impersonation_level;
		uint8_t context_mode;
		uint8_t effective_only;
	} LsaQosInfo;

	typedef struct {
		uint32_t length;
		uint8_t *root_directory;
		unicode_string *object_name;
		uint32_t attributes;
		uint32_t security_descriptor;
		LsaQosInfo *security_quality_of_service;
	} LsaObjectAttributes;

	typedef struct {
		unicode_string name;
		sid_t *sid;
	} LsaDomainInfo;

	enum {
		POLICY_INFO_AUDIT_EVENTS = 2,
		POLICY_INFO_PRIMARY_DOMAIN = 3,
		POLICY_INFO_ACCOUNT_DOMAIN = 5,
		POLICY_INFO_SERVER_ROLE = 6,
		POLICY_INFO_MODIFICATION = 9,
		POLICY_INFO_DNS_DOMAIN = 12
	};

	typedef [switch_type(short)] union {
		[case(POLICY_INFO_ACCOUNT_DOMAIN)] LsaDomainInfo account_domain;
	} LsaPolicyInfo;

	typedef struct {
		sid_t *sid;
	} lsa_SidPtr;

	typedef [public] struct {
		[range(0,1000)] uint32_t num_sids;
		[size_is(num_sids)] lsa_SidPtr *sids;
	} lsa_SidArray;

	typedef struct {
		unicode_string name;
		sid_t *sid;
	} lsa_TrustInformation;

	typedef struct {
		[range(0,1000)] uint32_t count;
		[size_is(count)] lsa_TrustInformation *domains;
		uint32_t max_count;
	} lsa_RefDomainList;

	typedef struct {
		uint16_t sid_type;
		unicode_string name;
		uint32_t sid_index;
	} lsa_TranslatedName;

	typedef struct {
		[range(0,1000)] uint32_t count;
		[size_is(count)] lsa_TranslatedName *names;
	} lsa_TransNameArray;

	[op(0x00)]
	int LsarClose([in,out] policy_handle *handle);

	[op(0x07)]
	int LsarQueryInformationPolicy([in] policy_handle *handle,
			[in] uint16_t level,
			[out,switch_is(level),unique] LsaPolicyInfo *info);

	[op(0x0f)]
	int LsarLookupSids([in] policy_handle *handle,
			[in] lsa_SidArray *sids,
			[out,unique] lsa_RefDomainList *domains,
			[in,out] lsa_TransNameArray *names,
			[in] uint16_t level,
			[in,out] uint32_t *count);

	[op(0x2c)]
	int LsarOpenPolicy([in,string,unique] wchar_t *system_name,
			[in] LsaObjectAttributes *object_attributes,
			[in] uint32_t desired_access,
			[out] policy_handle *policy_handle);
}
