[
	uuid(367abb81-9844-35f1-ad32-98f038001003),
	version(2.0)
]
interface svcctl
{
	import "rpc.idl";

	const unsigned long SC_MANAGER_ALL_ACCESS = 0x3f;

	[op(0x00)] 
	int CloseServiceHandle([in,out] policy_handle *handle);

	[op(0x0f)] 
	int OpenSCManager([in,string,unique] wchar_t *machine_name,
			[in,string,unique] wchar_t *database_name,
			[in] uint32_t access_mask,
			[out] policy_handle *handle);

	[op(0x10)] 
	int OpenService([in] policy_handle *scmanager_handle,
			[in,string] wchar_t *service_name,
			[in] uint32_t access_mask,
			[out] policy_handle *handle);

	[op(0x0e)]
	int EnumServicesStatus([in] policy_handle *handle,
			[in] uint32_t type,
			[in] uint32_t state,
			[in] uint32_t buf_size,
			[out,size_is(buf_size)] uint8_t *service,
			[out] uint32_t *bytes_needed,
			[out] uint32_t *services_returned,
			[in,out] uint32_t *resume_handle);

	[op(0x13)]
	int StartService([in] policy_handle *handle,
			[in] uint32_t num_service_args,
			[in,string,unique,size_is(num_service_args)] wchar_t **service_arg_vectors);

	typedef struct {
		uint32_t service_type;
		uint32_t current_state;
		uint32_t controls_accepted;
		uint32_t win32_exit_code;
		uint32_t service_specific_exit_code;
		uint32_t check_point;
		uint32_t wait_hint;
	} service_status;

	enum {
		SERVICE_CONTROL_STOP = 1,
		SERVICE_CONTROL_PAUSE = 2,
		SERVICE_CONTROL_CONTINUE = 3,
		SERVICE_CONTROL_INTERROGATE = 4
	};

	[op(0x01)]
	int ControlService([in] policy_handle *handle,
			[in] uint32_t control,
			[out] service_status *status);

}
